1) Write a C program to perform Matrix Multiplication
#include<stdio.h>
int main()
{
    int a[20][20],b[20][20];
    int c[20][20];
    int m,n;
    
    printf("enter the row value\n");
    scanf("%d",&m);
    printf("enter the no of cols");
    scanf("%d",&n);
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            scanf("%d",&a[i][j]);
        }
    }
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            printf("%d",a[i][j]);
             printf("\t");
        }
       
        printf("\n");
    }
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            scanf("%d",&b[i][j]);        }
    }
    for(int i=0;i<n;i++)
    {
        for(int j=0;j<n;j++)
        {
            printf("%d",b[i][j]);
            printf("\t");
        }
        printf("\n");
    }
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        
        {
            for(int k=0;k<m;k++)
            {
                c[i][j]+=a[i][k] * b[k][j];
            }
            
        }
    }
    printf("the multplication of two matrix is \n");
    for(int i=0;i<m;i++)
    {
        for(int j=0;j<n;j++)
        {
            printf("%d",c[i][j]);
            printf("\t");
        }
        printf("\n");
    }
    
}
2) Write a C program to find Odd or Even number from a given set of numbers
#include <stdio.h>
int main() {
    int i, n, num;
    printf("Enter how many numbers: ");
    scanf("%d", &n);
    for(i = 1; i <= n; i++) {
        printf("Enter number %d: ", i);
        scanf("%d", &num);
        if(num % 2 == 0)
            printf("%d is Even\n", num);
        else
            printf("%d is Odd\n", num);
    }
    return 0;
}
3) Write a C program to find Factorial of a given number without using Recursion
#include<stdio.h>
int main()
{
    int num;
    int fact=1;
    printf("enter the number");
    scanf("%d",&num);
    for(int i=1;i<=num;i++)
    {
        fact= fact *i; 
    }
    printf("the factorail of num is %d",fact);
    
}
4) Write a C program to find Fibonacci series without using Recursion
#include <stdio.h>

int main() {
    int n, a = 0, b = 1, c, i;

    printf("Enter number of terms: ");
    scanf("%d", &n);

    printf("Fibonacci Series: ");
    for(i = 0; i < n; i++) {
        printf("%d ", a);
        c = a + b;
        a = b;
        b = c;
    }

    return 0;
}
5) Write a C program to find Factorial of a given number using Recursion
#include <stdio.h>

int factorial(int n) {
    if (n == 0 || n == 1)
        return 1;
    else
        return n * factorial(n - 1);
}

int main() {
    int num;
    printf("Enter a number: ");
    scanf("%d", &num);

    printf("Factorial of %d is %d\n", num, factorial(num));
    return 0;
}
6) Write a C program to find Fibonacci series using Recursion
#include <stdio.h>

int fibonacci(int n) {
    if(n == 0) return 0;
    if(n == 1) return 1;
    return fibonacci(n - 1) + fibonacci(n - 2);
}

int main() {
    int n;
    printf("Enter number of terms: ");
    scanf("%d", &n);

    printf("Fibonacci Series: ");
    for(int i = 0; i < n; i++) {
        printf("%d ", fibonacci(i));
    }

    return 0;
}
7) Write a C program to implement Array operations such as Insert, Delete and Display
#include <stdio.h>

#define SIZE 100

int main() {
    int arr[SIZE], n = 10, choice, pos, val;

    while (1) {
        printf("\n1. Insert\n2. Delete\n3. Display\n4. Exit\nEnter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
        case 1:
            if (n >= SIZE) {
                printf("Array is full!\n");
                break;
            }
            printf("Enter position (0 to %d): ", n);
            scanf("%d", &pos);
            if (pos < 0 || pos > n) {
                printf("Invalid position!\n");
                break;
            }
            printf("Enter value: ");
            scanf("%d", &val);
            for (int i = n; i > pos; i--)
                arr[i] = arr[i - 1];
            arr[pos] = val;
            n++;
            printf("Inserted successfully.\n");
            break;

        case 2:
            if (n == 0) {
                printf("Array is empty!\n");
                break;
            }
            printf("Enter position to delete (0 to %d): ", n - 1);
            scanf("%d", &pos);
            if (pos < 0 || pos >= n) {
                printf("Invalid position!\n");
                break;
            }
            for (int i = pos; i < n - 1; i++)
                arr[i] = arr[i + 1];
            n--;
            printf("Deleted successfully.\n");
            break;

        case 3:
            if (n == 0) {
                printf("Array is empty!\n");
                break;
            }
            printf("Array elements: ");
            for (int i = 0; i < n; i++)
                printf("%d ", arr[i]);
            printf("\n");
            break;

        case 4:
            return 0;

        default:
            printf("Invalid choice!\n");
        }
    }
}
8) Write a C program to search a number using Linear Search method
#include <stdio.h>

int main() {
    int arr[100], n, key, found = 0;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    printf("Enter %d elements:\n", n);
    for(int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    printf("Enter number to search: ");
    scanf("%d", &key);

    for(int i = 0; i < n; i++) {
        if(arr[i] == key) {
            printf("Number found at position %d\n", i);
            found = 1;
            break;
        }
    }

    if(!found)
        printf("Number not found in the array.\n");

    return 0;
}
9) Write a C program to search a number using Binary Search method
#include <stdio.h>

int binarySearch(int arr[], int n, int key) {
    int low = 0, high = n - 1, mid;

    while (low <= high) {
        mid = (low + high) / 2;

        if (arr[mid] == key)
            return mid;
        else if (arr[mid] < key)
            low = mid + 1;
        else
            high = mid - 1;
    }

    return -1;
}

int main() {
    int arr[100], n, key, pos;

    printf("Enter number of elements: ");
    scanf("%d", &n);

    printf("Enter %d sorted elements:\n", n);
    for (int i = 0; i < n; i++)
        scanf("%d", &arr[i]);

    printf("Enter number to search: ");
    scanf("%d", &key);

    pos = binarySearch(arr, n, key);

    if (pos != -1)
        printf("Number found at position %d\n", pos);
    else
        printf("Number not found in the array.\n");

    return 0;
}
